# app_simplified.py
import modal
import gradio as gr
import asyncio
import os
import logging

# from modal_app import app
# from agents.orchestrator import SimplifiedMovieSearchOrchestrator

# –ò–º–ø–æ—Ä—Ç Modal –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤–º–µ—Å—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ
from agents.modal_orchestrator import ModalMovieSearchOrchestrator

app = modal.App("movie-plot-search")

# print("Trying to lookup functions...")
# try:
#     encode_func = modal.Function.from_name("tmdb-project", "encode_user_query")
#     print("‚úÖ encode_user_query function found")
# except Exception as e:
#     print(f"‚ùå Error looking up encode_user_query: {e}")


# --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
def _run_main_app():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(__name__)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Modal –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–±–µ–∑ API –∫–ª—é—á–∞)
    orchestrator = ModalMovieSearchOrchestrator()

    async def chat_interface(message: str, history: list) -> tuple:
        """ –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —á–∞—Ç–∞ —Å Modal –∞–≥–µ–Ω—Ç–∞–º–∏ + Nebius LLM5(—Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π)"""
        try:
            logger.info(f"Processing user message: {message[:50]}...")

            # –í–°–ï LLM –í–´–ó–û–í–´ –ü–†–û–ò–°–•–û–î–Ø–¢ –ù–ê MODAL –° NEBIUS API
            result = await orchestrator.process_user_input(message)
            logger.info(f"RESULT: {result}")
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            response_parts = []

            # ---------- 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –æ—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ----------
            status = result.get("status")

            # ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –¥–ª–∏–Ω—ã
            # if result.get("status") == "insufficient_length":
            #     response_parts.append("**‚ùå Text Too Short**")
            #     response_parts.append(result.get("message", ""))

            if status == "insufficient_length":
                response_parts += [
                    "**‚ùó **Editor Feedback:**",
                    result.get("message", ""),
                    "\n---\nPlot description is too short (min 50 words). "
                    "Please expand your plot description and try again."
                ]

            # (2) –ü–æ–ª–Ω—ã–π —É—Å–ø–µ—Ö: –Ω–∞–π–¥–µ–Ω–æ 3 —Ñ–∏–ª—å–º–∞ + —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –æ—Ç—á—ë—Ç
            elif status == "search_completed":
                logger.info(f"**‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–π–¥–µ–Ω—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ñ–∏–ª—å–º–æ–≤**")
                response_parts.append("**‚úÖ Plot processed and search completed!**")
                # ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º improved plot –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                if (result.get("improved_plot") and
                        result.get("improved_plot") != result.get("original_plot")):
                    logger.info(f"**üìù –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:** {result.get('improved_plot')}")
                    response_parts.append(f"**üìù Improved plot:** {result.get('improved_plot')}")
                # ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º movie overview –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                if result.get("movie_overview"):
                    response_parts.append(f"\n**üé¨ Generated movie overview:**\n"
                                          f"{result.get('movie_overview')}")
                # ‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Å –Ω–æ–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
                response_parts.append("\n" + "=" * 60)
                response_parts.append("**üéØ EXPERT SYSTEM RECOMMENDATIONS**")
                response_parts.append("=" * 30)

                # response_parts.append(result.get("recommendations", ""))
                recommendations = result.get("recommendations", "")
                if recommendations:
                    response_parts.append(recommendations)
                else:
                    response_parts.append("No recommendations were generated.")

                # ‚úÖ –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                response_parts.append("\n" + "=" * 60)
                response_parts.append("**üìä PERFORMANCE METRICS**")
                response_parts.append("=" * 60)

                metrics = result.get("performance_metrics", {})
                if metrics:
                    response_parts.append(f"üöÄ **GPU Used:** {'‚úÖ Yes' if metrics.get('using_gpu', False) else '‚ùå No'}")
                    response_parts.append(f"‚ö° **Search Time:** {metrics.get('search_time', 0):.3f}s")
                    response_parts.append(f"üîÑ **Total Processing Time:** {metrics.get('total_time', 0):.3f}s")
                    response_parts.append(f"üé¨ **Movies Analyzed:** {result.get('total_analyzed', 0)}")

                    if result.get('methodology'):
                        response_parts.append(f"üßÆ **Methodology:** {result.get('methodology')}")
                    if result.get('evaluation_formula'):
                        response_parts.append(f"üìê **Evaluation Formula:** {result.get('evaluation_formula')}")

                    # Russian comment: –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫ –Ω–æ–≤–æ–º—É –ø–æ–∏—Å–∫—É
                    response_parts.append("\n" + "=" * 30)
                    response_parts.append("**üîÑ Ready for the next search!**")
                    response_parts.append("Type a new movie plot and I will find more recommendations.")

            # ‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            elif status == "error":
                response_parts.append("**‚ùå System Error occurred:**")
                response_parts.append(result.get("message", "Unknown error"))
            else:
                response_parts.append(f"‚ö†Ô∏è Unhandled status: {status}")

            # ---------- 2. –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –∏ –∏—Å—Ç–æ—Ä–∏—é ----------
            assistant_reply = "\n".join(response_parts)
            new_history = history + [
                {"role": "user", "content": message},
                {"role": "assistant", "content": assistant_reply}
            ]

            # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ session info –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if status in ["search_completed", "needs_improvement", "insufficient_length"]:
                # –û–±–Ω–æ–≤–ª—è–µ–º session info –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                _ = get_session_info()  # –æ–±–Ω–æ–≤–∏—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —á–µ—Ä–µ–∑ .then() –≤ Gradio
                logger.info(f"Session info updated: {_}")

                # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
                return new_history, ""

        except Exception as e:
            logger.error(f"Error in chat interface: {e}")
            error_response = f"**‚ùå System Error:** {str(e)}"

            # –§–æ—Ä–º–∞—Ç messages –¥–ª—è –æ—à–∏–±–æ–∫
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            new_history = history + [
                {"role": "user", "content": message},
                {"role": "assistant", "content": f"**‚ùå Unexpected error:** {e}"}
            ]

            return new_history, ""

    def reset_chat():
        """–°–±—Ä–æ—Å —á–∞—Ç–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
        logger.info("Resetting chat session")
        orchestrator.reset_conversation()
        return [], ""       # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –∏—Å—Ç–æ—Ä–∏—é

    def get_session_info():
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏"""
        try:
            # logger.warning(f"Summary type: {type(orchestrator.get_conversation_summary())} _
            # Summary: {orchestrator.get_conversation_summary()}")
            summary = orchestrator.get_conversation_summary()
            logger.info(f"Getting session summary: {summary}")

            return f"""**Hybrid Session Info:**
    - ID: {summary['session_id']}
    - Step: {summary['current_step']}
    - Has Plot: {'‚úÖ' if summary.get('has_plot', False) else '‚ùå'}
    - Has Overview: {'‚úÖ' if summary.get('has_overview', False) else '‚ùå'}
    - Has Recommendations: {'‚úÖ' if summary.get('has_recommendations', False) else '‚ùå'}
    - Total Results: {summary.get('total_search_results', 0)}
            """

        except Exception as e:
            logger.error(f"Error in get_session_info: {e}")
            return f"Error getting session info: {e}"

    def force_refresh_session_info():
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        try:
            # ‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.info("Force refreshing session info...")
            logger.info(f"Current orchestrator state: {orchestrator.conversation_state}")

            summary = orchestrator.get_conversation_summary()
            logger.info(f"Retrieved summary: {summary}")

            return get_session_info()
        except Exception as e:
            logger.error(f"Error in force refresh: {e}")
            return f"Refresh error: {e}"

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Gradio
    with gr.Blocks(title="üé¨ Movie Plot Search", theme=gr.themes.Soft()) as demo:
        gr.Markdown("""
            # üé¨ Movie Plot Search Engine
            
            **üèóÔ∏è Architecture:**
                 üñ•Ô∏è **UI**: Local Gradio interface;
                 ‚ö° **Agents**: Running on Modal Cloud;
                 ü§ñ **LLM**: Nebius AI Studio API (Llama-3.3-70B-Instruct).

            ****The essence of the project:**** 
            *Describe the plot of the story in English, and the System will search the database for three films with a 
            similar script.* \n\n
            The system uses multi-agent architecture with GPU acceleration for optimal performance.
            
            **ü§ñ Powered by:** Nebius AI Studio | Modal Labs | FAISS | LlamaIndex ReAct Agents
        """)

        with gr.Row():
            with gr.Column(scale=4):
                # –î–æ–±–∞–≤–ª—è–µ–º type='messages'
                chatbot = gr.Chatbot(
                    value=[],
                    height=600,
                    label="üé¨ Conversation with AI Agents (Local UI ‚Üí Modal Agents ‚Üí Nebius LLM)",
                    show_copy_button=True,
                    type='messages'  # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
                )

                msg = gr.Textbox(
                    placeholder="Describe a movie plot (50-100 words in English)...",
                    label="Your message",
                    lines=3,
                    max_lines=5
                )

                with gr.Row():
                    submit_btn = gr.Button("üöÄ Submit", variant="primary", scale=2)
                    clear_btn = gr.Button("üîÑ Clear Chat", scale=1)

            with gr.Column(scale=1):
                gr.Markdown("""
                 ### üîç How to use:
                
                1. **üìù Describe the plot** (50-100 words in English)
                2. **‚úÖ Agent Editor validates** (length) and improves your description (grammar)
                3. **üé¨ Agent Film Critic** creates a movie overview based on your story
                4. **üîç System searches** the database for 10 films that correlate with your description 
                5. **üéØ Agent Film Expert selects** top 3 movies with explanations
                
                ### üìã Requirements:
                - ‚úÖ English text only
                - ‚úÖ 50-100 words
                - ‚úÖ Clear plot description
                - ‚úÖ Proper grammar (AI will help)
                
                ### ‚ö° Features:
                - üöÄ FAISS search
                - üß† Multi-agent reasoning
                - üìä Semantic + narrative similarity
                - üéØ Expert film analysis
                """)

                session_info = gr.Textbox(
                    label="Session Info",
                    value=get_session_info(),
                    interactive=False,
                    lines=5
                )

                refresh_btn = gr.Button("üîÑ Refresh Info", size="sm")

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        submit_btn.click(
            fn=chat_interface,
            inputs=[msg, chatbot],
            outputs=[chatbot, msg]
        ).then(  # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
            fn=get_session_info,
            outputs=[session_info]
        )

        msg.submit(
            fn=chat_interface,
            inputs=[msg, chatbot],
            outputs=[chatbot, msg]
        ).then(  # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û: –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ Enter
            fn=get_session_info,
            outputs=[session_info]
        )

        clear_btn.click(
            fn=reset_chat,
            outputs=[chatbot, msg]
        )

        refresh_btn.click(
            fn=force_refresh_session_info,
            outputs=[session_info]
        )

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    logger.info("Starting Movie Plot Search application")
    demo.launch(
        server_name="127.0.0.1",
        server_port=7860,
        share=True,
        debug=False,
        show_error=True
    )


# --- –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ Modal (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞ Modal)---
@app.function(secrets=[modal.Secret.from_name("nebius-secret")])
def run_app():
    _run_main_app()


# --- –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    _run_main_app()
